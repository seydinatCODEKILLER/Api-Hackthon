generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
}

enum MediaType {
  IMAGE
  AUDIO
  VIDEO
}

enum Statut {
  actif
  inactif
}

enum Lang {
  FR
  EN
  WO
}

enum TargetType {
  PANORAMA
  ARTWORK
}

enum TranslationStatus {
  draft
  published
}

enum RoomType {
  MODERN_ART    // Salle art moderne
  HISTORY       // Salle histoire
}

enum HotspotType {
  NAVIGATION
  ARTWORK
  INFO
}

model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  nom           String
  prenom        String
  email         String   @unique
  password      String
  telephone     String   @unique
  avatar        String?
  role          Role     @default(admin)
  date_creation DateTime @default(now()) @db.Timestamp
  statut        Statut   @default(actif)

  @@map("users")
}

model Artist {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  bio           String?
  artworks      Artwork[]
  nom           String
  prenom        String
  avatar        String?
  date_creation DateTime @default(now()) @db.Timestamp
  statut        Statut   @default(actif)

  @@map("artists")
}

model Artwork {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  qrCode        String   @unique
  qrCodeImageUrl String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  artistId      String   @db.ObjectId
  artist        Artist   @relation(fields: [artistId], references: [id])
  roomType      RoomType? @default(MODERN_ART)

  viewCount     Int      @default(0)
  lastViewedAt  DateTime?

  translations  ArtworkTranslation[]
  views         View[]
  media         ArtworkMedia[]

  @@map("artworks")
}

model ArtworkTranslation {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  artworkId   String             @db.ObjectId
  lang        Lang
  title       String?            
  description String
  status      TranslationStatus  @default(published)

  artwork     Artwork            @relation(fields: [artworkId], references: [id])

  @@unique([artworkId, lang])
  @@map("artwork_translations")
}

model ArtworkMedia {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  artworkId String   @db.ObjectId
  type      MediaType
  url       String

  artwork   Artwork  @relation(fields: [artworkId], references: [id])

  @@map("artwork_media")
}

model View {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  artworkId String   @db.ObjectId
  viewedAt  DateTime @default(now())
  userAgent String?
  ipAddress String?  

  artwork   Artwork  @relation(fields: [artworkId], references: [id])

  @@map("views")
}

model Panorama {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  imageUrl    String
  roomType    RoomType    
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hotspots    Hotspot[]
}

model Hotspot {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  panorama    Panorama   @relation(fields: [panoramaId], references: [id])
  panoramaId  String     @db.ObjectId
  x           Float      // Position horizontale (-180 à 180)
  y           Float      // Position verticale (-90 à 90)
  targetType  TargetType // PANORAMA ou ARTWORK
  targetId    String     // ID de la cible
  label       String?    // Texte affiché
  hotspotType HotspotType 
  createdAt   DateTime   @default(now())
}